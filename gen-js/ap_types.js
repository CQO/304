//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


LoginParam = function(args) {
  this.userType = null;
  this.user = null;
  this.pwd = null;
  this.macAddr = null;
  this.deviceType = null;
  this.tick = null;
  this.deviceInfo = null;
  this.status = null;
  this.status_flag = null;
  this.clientIP = null;
  this.version = null;
  this.sdkid = null;
  this.markSign = null;
  this.redirectUri = null;
  this.ip = null;
  if (args) {
    if (args.userType !== undefined && args.userType !== null) {
      this.userType = args.userType;
    }
    if (args.user !== undefined && args.user !== null) {
      this.user = args.user;
    }
    if (args.pwd !== undefined && args.pwd !== null) {
      this.pwd = args.pwd;
    }
    if (args.macAddr !== undefined && args.macAddr !== null) {
      this.macAddr = args.macAddr;
    }
    if (args.deviceType !== undefined && args.deviceType !== null) {
      this.deviceType = args.deviceType;
    }
    if (args.tick !== undefined && args.tick !== null) {
      this.tick = args.tick;
    }
    if (args.deviceInfo !== undefined && args.deviceInfo !== null) {
      this.deviceInfo = args.deviceInfo;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.status_flag !== undefined && args.status_flag !== null) {
      this.status_flag = args.status_flag;
    }
    if (args.clientIP !== undefined && args.clientIP !== null) {
      this.clientIP = args.clientIP;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.sdkid !== undefined && args.sdkid !== null) {
      this.sdkid = args.sdkid;
    }
    if (args.markSign !== undefined && args.markSign !== null) {
      this.markSign = args.markSign;
    }
    if (args.redirectUri !== undefined && args.redirectUri !== null) {
      this.redirectUri = args.redirectUri;
    }
    if (args.ip !== undefined && args.ip !== null) {
      this.ip = args.ip;
    }
  }
};
LoginParam.prototype = {};
LoginParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.userType = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pwd = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.macAddr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BYTE) {
        this.deviceType = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.BYTE) {
        this.tick = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.deviceInfo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.BYTE) {
        this.status = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.BYTE) {
        this.status_flag = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.clientIP = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.I64) {
        this.sdkid = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.markSign = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.redirectUri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 200:
      if (ftype == Thrift.Type.STRING) {
        this.ip = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoginParam.prototype.write = function(output) {
  output.writeStructBegin('LoginParam');
  if (this.userType !== null && this.userType !== undefined) {
    output.writeFieldBegin('userType', Thrift.Type.BYTE, 1);
    output.writeByte(this.userType);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.pwd !== null && this.pwd !== undefined) {
    output.writeFieldBegin('pwd', Thrift.Type.STRING, 3);
    output.writeString(this.pwd);
    output.writeFieldEnd();
  }
  if (this.macAddr !== null && this.macAddr !== undefined) {
    output.writeFieldBegin('macAddr', Thrift.Type.STRING, 4);
    output.writeString(this.macAddr);
    output.writeFieldEnd();
  }
  if (this.deviceType !== null && this.deviceType !== undefined) {
    output.writeFieldBegin('deviceType', Thrift.Type.BYTE, 5);
    output.writeByte(this.deviceType);
    output.writeFieldEnd();
  }
  if (this.tick !== null && this.tick !== undefined) {
    output.writeFieldBegin('tick', Thrift.Type.BYTE, 16);
    output.writeByte(this.tick);
    output.writeFieldEnd();
  }
  if (this.deviceInfo !== null && this.deviceInfo !== undefined) {
    output.writeFieldBegin('deviceInfo', Thrift.Type.STRING, 17);
    output.writeString(this.deviceInfo);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.BYTE, 18);
    output.writeByte(this.status);
    output.writeFieldEnd();
  }
  if (this.status_flag !== null && this.status_flag !== undefined) {
    output.writeFieldBegin('status_flag', Thrift.Type.BYTE, 20);
    output.writeByte(this.status_flag);
    output.writeFieldEnd();
  }
  if (this.clientIP !== null && this.clientIP !== undefined) {
    output.writeFieldBegin('clientIP', Thrift.Type.STRING, 21);
    output.writeString(this.clientIP);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 22);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.sdkid !== null && this.sdkid !== undefined) {
    output.writeFieldBegin('sdkid', Thrift.Type.I64, 23);
    output.writeI64(this.sdkid);
    output.writeFieldEnd();
  }
  if (this.markSign !== null && this.markSign !== undefined) {
    output.writeFieldBegin('markSign', Thrift.Type.STRING, 24);
    output.writeString(this.markSign);
    output.writeFieldEnd();
  }
  if (this.redirectUri !== null && this.redirectUri !== undefined) {
    output.writeFieldBegin('redirectUri', Thrift.Type.STRING, 25);
    output.writeString(this.redirectUri);
    output.writeFieldEnd();
  }
  if (this.ip !== null && this.ip !== undefined) {
    output.writeFieldBegin('ip', Thrift.Type.STRING, 200);
    output.writeString(this.ip);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LoginResult = function(args) {
  this.code = null;
  this.what = null;
  this.sessionTimeout = null;
  this.sessionID = null;
  this.userID = null;
  this.serverTime = null;
  this.privateKey = null;
  this.ticket = null;
  this.area = null;
  this.remainLockTime = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.what !== undefined && args.what !== null) {
      this.what = args.what;
    }
    if (args.sessionTimeout !== undefined && args.sessionTimeout !== null) {
      this.sessionTimeout = args.sessionTimeout;
    }
    if (args.sessionID !== undefined && args.sessionID !== null) {
      this.sessionID = args.sessionID;
    }
    if (args.userID !== undefined && args.userID !== null) {
      this.userID = args.userID;
    }
    if (args.serverTime !== undefined && args.serverTime !== null) {
      this.serverTime = args.serverTime;
    }
    if (args.privateKey !== undefined && args.privateKey !== null) {
      this.privateKey = args.privateKey;
    }
    if (args.ticket !== undefined && args.ticket !== null) {
      this.ticket = args.ticket;
    }
    if (args.area !== undefined && args.area !== null) {
      this.area = args.area;
    }
    if (args.remainLockTime !== undefined && args.remainLockTime !== null) {
      this.remainLockTime = args.remainLockTime;
    }
  }
};
LoginResult.prototype = {};
LoginResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.what = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.sessionTimeout = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.sessionID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.userID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.serverTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.privateKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.ticket = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.area = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.remainLockTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoginResult.prototype.write = function(output) {
  output.writeStructBegin('LoginResult');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.what !== null && this.what !== undefined) {
    output.writeFieldBegin('what', Thrift.Type.STRING, 2);
    output.writeString(this.what);
    output.writeFieldEnd();
  }
  if (this.sessionTimeout !== null && this.sessionTimeout !== undefined) {
    output.writeFieldBegin('sessionTimeout', Thrift.Type.I32, 3);
    output.writeI32(this.sessionTimeout);
    output.writeFieldEnd();
  }
  if (this.sessionID !== null && this.sessionID !== undefined) {
    output.writeFieldBegin('sessionID', Thrift.Type.I64, 4);
    output.writeI64(this.sessionID);
    output.writeFieldEnd();
  }
  if (this.userID !== null && this.userID !== undefined) {
    output.writeFieldBegin('userID', Thrift.Type.I64, 5);
    output.writeI64(this.userID);
    output.writeFieldEnd();
  }
  if (this.serverTime !== null && this.serverTime !== undefined) {
    output.writeFieldBegin('serverTime', Thrift.Type.I64, 6);
    output.writeI64(this.serverTime);
    output.writeFieldEnd();
  }
  if (this.privateKey !== null && this.privateKey !== undefined) {
    output.writeFieldBegin('privateKey', Thrift.Type.STRING, 7);
    output.writeString(this.privateKey);
    output.writeFieldEnd();
  }
  if (this.ticket !== null && this.ticket !== undefined) {
    output.writeFieldBegin('ticket', Thrift.Type.STRING, 8);
    output.writeString(this.ticket);
    output.writeFieldEnd();
  }
  if (this.area !== null && this.area !== undefined) {
    output.writeFieldBegin('area', Thrift.Type.STRING, 9);
    output.writeString(this.area);
    output.writeFieldEnd();
  }
  if (this.remainLockTime !== null && this.remainLockTime !== undefined) {
    output.writeFieldBegin('remainLockTime', Thrift.Type.I64, 11);
    output.writeI64(this.remainLockTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

