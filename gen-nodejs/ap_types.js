//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
var LoginParam = module.exports.LoginParam = function(args) {
  this.userType = null;
  this.user = null;
  this.pwd = null;
  this.macAddr = null;
  this.deviceType = null;
  this.tick = null;
  this.deviceInfo = null;
  this.status = null;
  this.status_flag = null;
  this.clientIP = null;
  this.version = null;
  this.sdkid = null;
  this.markSign = null;
  this.redirectUri = null;
  this.ip = null;
  if (args) {
    if (args.userType !== undefined && args.userType !== null) {
      this.userType = args.userType;
    }
    if (args.user !== undefined && args.user !== null) {
      this.user = args.user;
    }
    if (args.pwd !== undefined && args.pwd !== null) {
      this.pwd = args.pwd;
    }
    if (args.macAddr !== undefined && args.macAddr !== null) {
      this.macAddr = args.macAddr;
    }
    if (args.deviceType !== undefined && args.deviceType !== null) {
      this.deviceType = args.deviceType;
    }
    if (args.tick !== undefined && args.tick !== null) {
      this.tick = args.tick;
    }
    if (args.deviceInfo !== undefined && args.deviceInfo !== null) {
      this.deviceInfo = args.deviceInfo;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.status_flag !== undefined && args.status_flag !== null) {
      this.status_flag = args.status_flag;
    }
    if (args.clientIP !== undefined && args.clientIP !== null) {
      this.clientIP = args.clientIP;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.sdkid !== undefined && args.sdkid !== null) {
      this.sdkid = args.sdkid;
    }
    if (args.markSign !== undefined && args.markSign !== null) {
      this.markSign = args.markSign;
    }
    if (args.redirectUri !== undefined && args.redirectUri !== null) {
      this.redirectUri = args.redirectUri;
    }
    if (args.ip !== undefined && args.ip !== null) {
      this.ip = args.ip;
    }
  }
};
LoginParam.prototype = {};
LoginParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.userType = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pwd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.macAddr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BYTE) {
        this.deviceType = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.BYTE) {
        this.tick = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.deviceInfo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.BYTE) {
        this.status = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.BYTE) {
        this.status_flag = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.clientIP = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.I64) {
        this.sdkid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.markSign = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.redirectUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 200:
      if (ftype == Thrift.Type.STRING) {
        this.ip = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoginParam.prototype.write = function(output) {
  output.writeStructBegin('LoginParam');
  if (this.userType !== null && this.userType !== undefined) {
    output.writeFieldBegin('userType', Thrift.Type.BYTE, 1);
    output.writeByte(this.userType);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.pwd !== null && this.pwd !== undefined) {
    output.writeFieldBegin('pwd', Thrift.Type.STRING, 3);
    output.writeString(this.pwd);
    output.writeFieldEnd();
  }
  if (this.macAddr !== null && this.macAddr !== undefined) {
    output.writeFieldBegin('macAddr', Thrift.Type.STRING, 4);
    output.writeString(this.macAddr);
    output.writeFieldEnd();
  }
  if (this.deviceType !== null && this.deviceType !== undefined) {
    output.writeFieldBegin('deviceType', Thrift.Type.BYTE, 5);
    output.writeByte(this.deviceType);
    output.writeFieldEnd();
  }
  if (this.tick !== null && this.tick !== undefined) {
    output.writeFieldBegin('tick', Thrift.Type.BYTE, 16);
    output.writeByte(this.tick);
    output.writeFieldEnd();
  }
  if (this.deviceInfo !== null && this.deviceInfo !== undefined) {
    output.writeFieldBegin('deviceInfo', Thrift.Type.STRING, 17);
    output.writeString(this.deviceInfo);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.BYTE, 18);
    output.writeByte(this.status);
    output.writeFieldEnd();
  }
  if (this.status_flag !== null && this.status_flag !== undefined) {
    output.writeFieldBegin('status_flag', Thrift.Type.BYTE, 20);
    output.writeByte(this.status_flag);
    output.writeFieldEnd();
  }
  if (this.clientIP !== null && this.clientIP !== undefined) {
    output.writeFieldBegin('clientIP', Thrift.Type.STRING, 21);
    output.writeString(this.clientIP);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 22);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.sdkid !== null && this.sdkid !== undefined) {
    output.writeFieldBegin('sdkid', Thrift.Type.I64, 23);
    output.writeI64(this.sdkid);
    output.writeFieldEnd();
  }
  if (this.markSign !== null && this.markSign !== undefined) {
    output.writeFieldBegin('markSign', Thrift.Type.STRING, 24);
    output.writeString(this.markSign);
    output.writeFieldEnd();
  }
  if (this.redirectUri !== null && this.redirectUri !== undefined) {
    output.writeFieldBegin('redirectUri', Thrift.Type.STRING, 25);
    output.writeString(this.redirectUri);
    output.writeFieldEnd();
  }
  if (this.ip !== null && this.ip !== undefined) {
    output.writeFieldBegin('ip', Thrift.Type.STRING, 200);
    output.writeString(this.ip);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LoginResult = module.exports.LoginResult = function(args) {
  this.code = null;
  this.what = null;
  this.sessionTimeout = null;
  this.sessionID = null;
  this.userID = null;
  this.serverTime = null;
  this.privateKey = null;
  this.ticket = null;
  this.area = null;
  this.remainLockTime = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.what !== undefined && args.what !== null) {
      this.what = args.what;
    }
    if (args.sessionTimeout !== undefined && args.sessionTimeout !== null) {
      this.sessionTimeout = args.sessionTimeout;
    }
    if (args.sessionID !== undefined && args.sessionID !== null) {
      this.sessionID = args.sessionID;
    }
    if (args.userID !== undefined && args.userID !== null) {
      this.userID = args.userID;
    }
    if (args.serverTime !== undefined && args.serverTime !== null) {
      this.serverTime = args.serverTime;
    }
    if (args.privateKey !== undefined && args.privateKey !== null) {
      this.privateKey = args.privateKey;
    }
    if (args.ticket !== undefined && args.ticket !== null) {
      this.ticket = args.ticket;
    }
    if (args.area !== undefined && args.area !== null) {
      this.area = args.area;
    }
    if (args.remainLockTime !== undefined && args.remainLockTime !== null) {
      this.remainLockTime = args.remainLockTime;
    }
  }
};
LoginResult.prototype = {};
LoginResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.what = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.sessionTimeout = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.sessionID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.userID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.serverTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.privateKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.ticket = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.area = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.remainLockTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoginResult.prototype.write = function(output) {
  output.writeStructBegin('LoginResult');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.what !== null && this.what !== undefined) {
    output.writeFieldBegin('what', Thrift.Type.STRING, 2);
    output.writeString(this.what);
    output.writeFieldEnd();
  }
  if (this.sessionTimeout !== null && this.sessionTimeout !== undefined) {
    output.writeFieldBegin('sessionTimeout', Thrift.Type.I32, 3);
    output.writeI32(this.sessionTimeout);
    output.writeFieldEnd();
  }
  if (this.sessionID !== null && this.sessionID !== undefined) {
    output.writeFieldBegin('sessionID', Thrift.Type.I64, 4);
    output.writeI64(this.sessionID);
    output.writeFieldEnd();
  }
  if (this.userID !== null && this.userID !== undefined) {
    output.writeFieldBegin('userID', Thrift.Type.I64, 5);
    output.writeI64(this.userID);
    output.writeFieldEnd();
  }
  if (this.serverTime !== null && this.serverTime !== undefined) {
    output.writeFieldBegin('serverTime', Thrift.Type.I64, 6);
    output.writeI64(this.serverTime);
    output.writeFieldEnd();
  }
  if (this.privateKey !== null && this.privateKey !== undefined) {
    output.writeFieldBegin('privateKey', Thrift.Type.STRING, 7);
    output.writeString(this.privateKey);
    output.writeFieldEnd();
  }
  if (this.ticket !== null && this.ticket !== undefined) {
    output.writeFieldBegin('ticket', Thrift.Type.STRING, 8);
    output.writeString(this.ticket);
    output.writeFieldEnd();
  }
  if (this.area !== null && this.area !== undefined) {
    output.writeFieldBegin('area', Thrift.Type.STRING, 9);
    output.writeString(this.area);
    output.writeFieldEnd();
  }
  if (this.remainLockTime !== null && this.remainLockTime !== undefined) {
    output.writeFieldBegin('remainLockTime', Thrift.Type.I64, 11);
    output.writeI64(this.remainLockTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MyAppInfo = module.exports.MyAppInfo = function(args) {
  this.appClassify = null;
  this.appInfoList = null;
  this.code = null;
  this.msg = null;
  if (args) {
    if (args.appClassify !== undefined && args.appClassify !== null) {
      this.appClassify = new ttypes.AppClassifyBean(args.appClassify);
    }
    if (args.appInfoList !== undefined && args.appInfoList !== null) {
      this.appInfoList = Thrift.copyList(args.appInfoList, [null]);
    }
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = args.msg;
    }
  }
};
MyAppInfo.prototype = {};
MyAppInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.appClassify = new ttypes.AppClassifyBean();
        this.appClassify.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.appInfoList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.AppInfoBean();
          elem6.read(input);
          this.appInfoList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.code = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MyAppInfo.prototype.write = function(output) {
  output.writeStructBegin('MyAppInfo');
  if (this.appClassify !== null && this.appClassify !== undefined) {
    output.writeFieldBegin('appClassify', Thrift.Type.STRUCT, 1);
    this.appClassify.write(output);
    output.writeFieldEnd();
  }
  if (this.appInfoList !== null && this.appInfoList !== undefined) {
    output.writeFieldBegin('appInfoList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.appInfoList.length);
    for (var iter7 in this.appInfoList)
    {
      if (this.appInfoList.hasOwnProperty(iter7))
      {
        iter7 = this.appInfoList[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I64, 3);
    output.writeI64(this.code);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 4);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppStore = module.exports.AppStore = function(args) {
  this.appInfoList = null;
  this.pageSize = null;
  this.pageNum = null;
  this.totalCount = null;
  this.totalPage = null;
  this.code = null;
  this.msg = null;
  if (args) {
    if (args.appInfoList !== undefined && args.appInfoList !== null) {
      this.appInfoList = Thrift.copyList(args.appInfoList, [null]);
    }
    if (args.pageSize !== undefined && args.pageSize !== null) {
      this.pageSize = args.pageSize;
    }
    if (args.pageNum !== undefined && args.pageNum !== null) {
      this.pageNum = args.pageNum;
    }
    if (args.totalCount !== undefined && args.totalCount !== null) {
      this.totalCount = args.totalCount;
    }
    if (args.totalPage !== undefined && args.totalPage !== null) {
      this.totalPage = args.totalPage;
    }
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = args.msg;
    }
  }
};
AppStore.prototype = {};
AppStore.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.appInfoList = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.AppInfoBean();
          elem14.read(input);
          this.appInfoList.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.pageSize = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.pageNum = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.totalCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.totalPage = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.code = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppStore.prototype.write = function(output) {
  output.writeStructBegin('AppStore');
  if (this.appInfoList !== null && this.appInfoList !== undefined) {
    output.writeFieldBegin('appInfoList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.appInfoList.length);
    for (var iter15 in this.appInfoList)
    {
      if (this.appInfoList.hasOwnProperty(iter15))
      {
        iter15 = this.appInfoList[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pageSize !== null && this.pageSize !== undefined) {
    output.writeFieldBegin('pageSize', Thrift.Type.I64, 2);
    output.writeI64(this.pageSize);
    output.writeFieldEnd();
  }
  if (this.pageNum !== null && this.pageNum !== undefined) {
    output.writeFieldBegin('pageNum', Thrift.Type.I64, 3);
    output.writeI64(this.pageNum);
    output.writeFieldEnd();
  }
  if (this.totalCount !== null && this.totalCount !== undefined) {
    output.writeFieldBegin('totalCount', Thrift.Type.I64, 4);
    output.writeI64(this.totalCount);
    output.writeFieldEnd();
  }
  if (this.totalPage !== null && this.totalPage !== undefined) {
    output.writeFieldBegin('totalPage', Thrift.Type.I64, 5);
    output.writeI64(this.totalPage);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I64, 6);
    output.writeI64(this.code);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 7);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppInfoBean = module.exports.AppInfoBean = function(args) {
  this.id = null;
  this.name = null;
  this.icon = null;
  this.classify = null;
  this.type = null;
  this.homeUrl = null;
  this.version = null;
  this.packageName = null;
  this.downloadUrl = null;
  this.activityName = null;
  this.orgIds = null;
  this.status = null;
  this.key = null;
  this.secret = null;
  this.createUserID = null;
  this.createTime = null;
  this.updateTime = null;
  this.sort = null;
  this.column1 = null;
  this.column2 = null;
  this.column3 = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.icon !== undefined && args.icon !== null) {
      this.icon = args.icon;
    }
    if (args.classify !== undefined && args.classify !== null) {
      this.classify = args.classify;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.homeUrl !== undefined && args.homeUrl !== null) {
      this.homeUrl = args.homeUrl;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.packageName !== undefined && args.packageName !== null) {
      this.packageName = args.packageName;
    }
    if (args.downloadUrl !== undefined && args.downloadUrl !== null) {
      this.downloadUrl = args.downloadUrl;
    }
    if (args.activityName !== undefined && args.activityName !== null) {
      this.activityName = args.activityName;
    }
    if (args.orgIds !== undefined && args.orgIds !== null) {
      this.orgIds = args.orgIds;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.secret !== undefined && args.secret !== null) {
      this.secret = args.secret;
    }
    if (args.createUserID !== undefined && args.createUserID !== null) {
      this.createUserID = args.createUserID;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.updateTime !== undefined && args.updateTime !== null) {
      this.updateTime = args.updateTime;
    }
    if (args.sort !== undefined && args.sort !== null) {
      this.sort = args.sort;
    }
    if (args.column1 !== undefined && args.column1 !== null) {
      this.column1 = args.column1;
    }
    if (args.column2 !== undefined && args.column2 !== null) {
      this.column2 = args.column2;
    }
    if (args.column3 !== undefined && args.column3 !== null) {
      this.column3 = args.column3;
    }
  }
};
AppInfoBean.prototype = {};
AppInfoBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.icon = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.classify = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.homeUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.packageName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.downloadUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.activityName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.orgIds = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.secret = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.createUserID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.updateTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I32) {
        this.sort = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.column1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.column2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.column3 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppInfoBean.prototype.write = function(output) {
  output.writeStructBegin('AppInfoBean');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.icon !== null && this.icon !== undefined) {
    output.writeFieldBegin('icon', Thrift.Type.STRING, 3);
    output.writeString(this.icon);
    output.writeFieldEnd();
  }
  if (this.classify !== null && this.classify !== undefined) {
    output.writeFieldBegin('classify', Thrift.Type.I32, 4);
    output.writeI32(this.classify);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 5);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.homeUrl !== null && this.homeUrl !== undefined) {
    output.writeFieldBegin('homeUrl', Thrift.Type.STRING, 6);
    output.writeString(this.homeUrl);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 7);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.packageName !== null && this.packageName !== undefined) {
    output.writeFieldBegin('packageName', Thrift.Type.STRING, 8);
    output.writeString(this.packageName);
    output.writeFieldEnd();
  }
  if (this.downloadUrl !== null && this.downloadUrl !== undefined) {
    output.writeFieldBegin('downloadUrl', Thrift.Type.STRING, 9);
    output.writeString(this.downloadUrl);
    output.writeFieldEnd();
  }
  if (this.activityName !== null && this.activityName !== undefined) {
    output.writeFieldBegin('activityName', Thrift.Type.STRING, 10);
    output.writeString(this.activityName);
    output.writeFieldEnd();
  }
  if (this.orgIds !== null && this.orgIds !== undefined) {
    output.writeFieldBegin('orgIds', Thrift.Type.STRING, 11);
    output.writeString(this.orgIds);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 12);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 13);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.secret !== null && this.secret !== undefined) {
    output.writeFieldBegin('secret', Thrift.Type.STRING, 14);
    output.writeString(this.secret);
    output.writeFieldEnd();
  }
  if (this.createUserID !== null && this.createUserID !== undefined) {
    output.writeFieldBegin('createUserID', Thrift.Type.I64, 15);
    output.writeI64(this.createUserID);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 16);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.updateTime !== null && this.updateTime !== undefined) {
    output.writeFieldBegin('updateTime', Thrift.Type.STRING, 17);
    output.writeString(this.updateTime);
    output.writeFieldEnd();
  }
  if (this.sort !== null && this.sort !== undefined) {
    output.writeFieldBegin('sort', Thrift.Type.I32, 18);
    output.writeI32(this.sort);
    output.writeFieldEnd();
  }
  if (this.column1 !== null && this.column1 !== undefined) {
    output.writeFieldBegin('column1', Thrift.Type.STRING, 19);
    output.writeString(this.column1);
    output.writeFieldEnd();
  }
  if (this.column2 !== null && this.column2 !== undefined) {
    output.writeFieldBegin('column2', Thrift.Type.STRING, 20);
    output.writeString(this.column2);
    output.writeFieldEnd();
  }
  if (this.column3 !== null && this.column3 !== undefined) {
    output.writeFieldBegin('column3', Thrift.Type.STRING, 21);
    output.writeString(this.column3);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppClassifyBean = module.exports.AppClassifyBean = function(args) {
  this.classifyID = null;
  this.classifyName = null;
  this.createUserID = null;
  this.classifyStatus = null;
  this.createTime = null;
  this.updateTime = null;
  this.classifySort = null;
  this.classifyColumn1 = null;
  this.classifyColumn2 = null;
  this.classifyColumn3 = null;
  if (args) {
    if (args.classifyID !== undefined && args.classifyID !== null) {
      this.classifyID = args.classifyID;
    }
    if (args.classifyName !== undefined && args.classifyName !== null) {
      this.classifyName = args.classifyName;
    }
    if (args.createUserID !== undefined && args.createUserID !== null) {
      this.createUserID = args.createUserID;
    }
    if (args.classifyStatus !== undefined && args.classifyStatus !== null) {
      this.classifyStatus = args.classifyStatus;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.updateTime !== undefined && args.updateTime !== null) {
      this.updateTime = args.updateTime;
    }
    if (args.classifySort !== undefined && args.classifySort !== null) {
      this.classifySort = args.classifySort;
    }
    if (args.classifyColumn1 !== undefined && args.classifyColumn1 !== null) {
      this.classifyColumn1 = args.classifyColumn1;
    }
    if (args.classifyColumn2 !== undefined && args.classifyColumn2 !== null) {
      this.classifyColumn2 = args.classifyColumn2;
    }
    if (args.classifyColumn3 !== undefined && args.classifyColumn3 !== null) {
      this.classifyColumn3 = args.classifyColumn3;
    }
  }
};
AppClassifyBean.prototype = {};
AppClassifyBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.classifyID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.classifyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.createUserID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.classifyStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.updateTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.classifySort = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.classifyColumn1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.classifyColumn2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.classifyColumn3 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppClassifyBean.prototype.write = function(output) {
  output.writeStructBegin('AppClassifyBean');
  if (this.classifyID !== null && this.classifyID !== undefined) {
    output.writeFieldBegin('classifyID', Thrift.Type.I32, 1);
    output.writeI32(this.classifyID);
    output.writeFieldEnd();
  }
  if (this.classifyName !== null && this.classifyName !== undefined) {
    output.writeFieldBegin('classifyName', Thrift.Type.STRING, 2);
    output.writeString(this.classifyName);
    output.writeFieldEnd();
  }
  if (this.createUserID !== null && this.createUserID !== undefined) {
    output.writeFieldBegin('createUserID', Thrift.Type.I64, 3);
    output.writeI64(this.createUserID);
    output.writeFieldEnd();
  }
  if (this.classifyStatus !== null && this.classifyStatus !== undefined) {
    output.writeFieldBegin('classifyStatus', Thrift.Type.I32, 4);
    output.writeI32(this.classifyStatus);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 5);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.updateTime !== null && this.updateTime !== undefined) {
    output.writeFieldBegin('updateTime', Thrift.Type.STRING, 6);
    output.writeString(this.updateTime);
    output.writeFieldEnd();
  }
  if (this.classifySort !== null && this.classifySort !== undefined) {
    output.writeFieldBegin('classifySort', Thrift.Type.I32, 7);
    output.writeI32(this.classifySort);
    output.writeFieldEnd();
  }
  if (this.classifyColumn1 !== null && this.classifyColumn1 !== undefined) {
    output.writeFieldBegin('classifyColumn1', Thrift.Type.STRING, 8);
    output.writeString(this.classifyColumn1);
    output.writeFieldEnd();
  }
  if (this.classifyColumn2 !== null && this.classifyColumn2 !== undefined) {
    output.writeFieldBegin('classifyColumn2', Thrift.Type.STRING, 9);
    output.writeString(this.classifyColumn2);
    output.writeFieldEnd();
  }
  if (this.classifyColumn3 !== null && this.classifyColumn3 !== undefined) {
    output.writeFieldBegin('classifyColumn3', Thrift.Type.STRING, 10);
    output.writeString(this.classifyColumn3);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var HotNewsBean = module.exports.HotNewsBean = function(args) {
  this.id = null;
  this.newsTitle = null;
  this.newsCover = null;
  this.newsContent = null;
  this.createUserID = null;
  this.createTime = null;
  this.updateTime = null;
  this.newsSort = null;
  this.newsColumn1 = null;
  this.newsColumn2 = null;
  this.newsColumn3 = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.newsTitle !== undefined && args.newsTitle !== null) {
      this.newsTitle = args.newsTitle;
    }
    if (args.newsCover !== undefined && args.newsCover !== null) {
      this.newsCover = args.newsCover;
    }
    if (args.newsContent !== undefined && args.newsContent !== null) {
      this.newsContent = args.newsContent;
    }
    if (args.createUserID !== undefined && args.createUserID !== null) {
      this.createUserID = args.createUserID;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.updateTime !== undefined && args.updateTime !== null) {
      this.updateTime = args.updateTime;
    }
    if (args.newsSort !== undefined && args.newsSort !== null) {
      this.newsSort = args.newsSort;
    }
    if (args.newsColumn1 !== undefined && args.newsColumn1 !== null) {
      this.newsColumn1 = args.newsColumn1;
    }
    if (args.newsColumn2 !== undefined && args.newsColumn2 !== null) {
      this.newsColumn2 = args.newsColumn2;
    }
    if (args.newsColumn3 !== undefined && args.newsColumn3 !== null) {
      this.newsColumn3 = args.newsColumn3;
    }
  }
};
HotNewsBean.prototype = {};
HotNewsBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.newsTitle = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.newsCover = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.newsContent = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.createUserID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.updateTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.newsSort = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.newsColumn1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.newsColumn2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.newsColumn3 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HotNewsBean.prototype.write = function(output) {
  output.writeStructBegin('HotNewsBean');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.newsTitle !== null && this.newsTitle !== undefined) {
    output.writeFieldBegin('newsTitle', Thrift.Type.STRING, 2);
    output.writeString(this.newsTitle);
    output.writeFieldEnd();
  }
  if (this.newsCover !== null && this.newsCover !== undefined) {
    output.writeFieldBegin('newsCover', Thrift.Type.STRING, 3);
    output.writeString(this.newsCover);
    output.writeFieldEnd();
  }
  if (this.newsContent !== null && this.newsContent !== undefined) {
    output.writeFieldBegin('newsContent', Thrift.Type.STRING, 4);
    output.writeString(this.newsContent);
    output.writeFieldEnd();
  }
  if (this.createUserID !== null && this.createUserID !== undefined) {
    output.writeFieldBegin('createUserID', Thrift.Type.I64, 5);
    output.writeI64(this.createUserID);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 6);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.updateTime !== null && this.updateTime !== undefined) {
    output.writeFieldBegin('updateTime', Thrift.Type.STRING, 7);
    output.writeString(this.updateTime);
    output.writeFieldEnd();
  }
  if (this.newsSort !== null && this.newsSort !== undefined) {
    output.writeFieldBegin('newsSort', Thrift.Type.I32, 8);
    output.writeI32(this.newsSort);
    output.writeFieldEnd();
  }
  if (this.newsColumn1 !== null && this.newsColumn1 !== undefined) {
    output.writeFieldBegin('newsColumn1', Thrift.Type.STRING, 9);
    output.writeString(this.newsColumn1);
    output.writeFieldEnd();
  }
  if (this.newsColumn2 !== null && this.newsColumn2 !== undefined) {
    output.writeFieldBegin('newsColumn2', Thrift.Type.STRING, 10);
    output.writeString(this.newsColumn2);
    output.writeFieldEnd();
  }
  if (this.newsColumn3 !== null && this.newsColumn3 !== undefined) {
    output.writeFieldBegin('newsColumn3', Thrift.Type.STRING, 11);
    output.writeString(this.newsColumn3);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Result = module.exports.Result = function(args) {
  this.code = null;
  this.message = null;
  this.result = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.result !== undefined && args.result !== null) {
      this.result = args.result;
    }
  }
};
Result.prototype = {};
Result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.result = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Result.prototype.write = function(output) {
  output.writeStructBegin('Result');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.I64, 3);
    output.writeI64(this.result);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppStoreRet = module.exports.AppStoreRet = function(args) {
  this.code = null;
  this.what = null;
  this.appInfos = null;
  this.appStores = null;
  this.appBeans = null;
  this.classifyBeans = null;
  this.hotNewsBeans = null;
  this.ret = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.what !== undefined && args.what !== null) {
      this.what = args.what;
    }
    if (args.appInfos !== undefined && args.appInfos !== null) {
      this.appInfos = Thrift.copyList(args.appInfos, [ttypes.MyAppInfo]);
    }
    if (args.appStores !== undefined && args.appStores !== null) {
      this.appStores = Thrift.copyList(args.appStores, [ttypes.AppStore]);
    }
    if (args.appBeans !== undefined && args.appBeans !== null) {
      this.appBeans = Thrift.copyList(args.appBeans, [ttypes.AppInfoBean]);
    }
    if (args.classifyBeans !== undefined && args.classifyBeans !== null) {
      this.classifyBeans = Thrift.copyList(args.classifyBeans, [ttypes.AppClassifyBean]);
    }
    if (args.hotNewsBeans !== undefined && args.hotNewsBeans !== null) {
      this.hotNewsBeans = Thrift.copyList(args.hotNewsBeans, [ttypes.HotNewsBean]);
    }
    if (args.ret !== undefined && args.ret !== null) {
      this.ret = new ttypes.Result(args.ret);
    }
  }
};
AppStoreRet.prototype = {};
AppStoreRet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.what = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.appInfos = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.MyAppInfo();
          elem22.read(input);
          this.appInfos.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size23 = 0;
        var _rtmp327;
        this.appStores = [];
        var _etype26 = 0;
        _rtmp327 = input.readListBegin();
        _etype26 = _rtmp327.etype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var elem29 = null;
          elem29 = new ttypes.AppStore();
          elem29.read(input);
          this.appStores.push(elem29);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size30 = 0;
        var _rtmp334;
        this.appBeans = [];
        var _etype33 = 0;
        _rtmp334 = input.readListBegin();
        _etype33 = _rtmp334.etype;
        _size30 = _rtmp334.size;
        for (var _i35 = 0; _i35 < _size30; ++_i35)
        {
          var elem36 = null;
          elem36 = new ttypes.AppInfoBean();
          elem36.read(input);
          this.appBeans.push(elem36);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size37 = 0;
        var _rtmp341;
        this.classifyBeans = [];
        var _etype40 = 0;
        _rtmp341 = input.readListBegin();
        _etype40 = _rtmp341.etype;
        _size37 = _rtmp341.size;
        for (var _i42 = 0; _i42 < _size37; ++_i42)
        {
          var elem43 = null;
          elem43 = new ttypes.AppClassifyBean();
          elem43.read(input);
          this.classifyBeans.push(elem43);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size44 = 0;
        var _rtmp348;
        this.hotNewsBeans = [];
        var _etype47 = 0;
        _rtmp348 = input.readListBegin();
        _etype47 = _rtmp348.etype;
        _size44 = _rtmp348.size;
        for (var _i49 = 0; _i49 < _size44; ++_i49)
        {
          var elem50 = null;
          elem50 = new ttypes.HotNewsBean();
          elem50.read(input);
          this.hotNewsBeans.push(elem50);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.ret = new ttypes.Result();
        this.ret.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppStoreRet.prototype.write = function(output) {
  output.writeStructBegin('AppStoreRet');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.what !== null && this.what !== undefined) {
    output.writeFieldBegin('what', Thrift.Type.STRING, 2);
    output.writeString(this.what);
    output.writeFieldEnd();
  }
  if (this.appInfos !== null && this.appInfos !== undefined) {
    output.writeFieldBegin('appInfos', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.appInfos.length);
    for (var iter51 in this.appInfos)
    {
      if (this.appInfos.hasOwnProperty(iter51))
      {
        iter51 = this.appInfos[iter51];
        iter51.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.appStores !== null && this.appStores !== undefined) {
    output.writeFieldBegin('appStores', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.appStores.length);
    for (var iter52 in this.appStores)
    {
      if (this.appStores.hasOwnProperty(iter52))
      {
        iter52 = this.appStores[iter52];
        iter52.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.appBeans !== null && this.appBeans !== undefined) {
    output.writeFieldBegin('appBeans', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.appBeans.length);
    for (var iter53 in this.appBeans)
    {
      if (this.appBeans.hasOwnProperty(iter53))
      {
        iter53 = this.appBeans[iter53];
        iter53.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.classifyBeans !== null && this.classifyBeans !== undefined) {
    output.writeFieldBegin('classifyBeans', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.classifyBeans.length);
    for (var iter54 in this.classifyBeans)
    {
      if (this.classifyBeans.hasOwnProperty(iter54))
      {
        iter54 = this.classifyBeans[iter54];
        iter54.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.hotNewsBeans !== null && this.hotNewsBeans !== undefined) {
    output.writeFieldBegin('hotNewsBeans', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.hotNewsBeans.length);
    for (var iter55 in this.hotNewsBeans)
    {
      if (this.hotNewsBeans.hasOwnProperty(iter55))
      {
        iter55 = this.hotNewsBeans[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ret !== null && this.ret !== undefined) {
    output.writeFieldBegin('ret', Thrift.Type.STRUCT, 8);
    this.ret.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SessionTicket = module.exports.SessionTicket = function(args) {
  this.sessionID = null;
  this.ticket = null;
  if (args) {
    if (args.sessionID !== undefined && args.sessionID !== null) {
      this.sessionID = args.sessionID;
    }
    if (args.ticket !== undefined && args.ticket !== null) {
      this.ticket = args.ticket;
    }
  }
};
SessionTicket.prototype = {};
SessionTicket.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ticket = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionTicket.prototype.write = function(output) {
  output.writeStructBegin('SessionTicket');
  if (this.sessionID !== null && this.sessionID !== undefined) {
    output.writeFieldBegin('sessionID', Thrift.Type.I64, 1);
    output.writeI64(this.sessionID);
    output.writeFieldEnd();
  }
  if (this.ticket !== null && this.ticket !== undefined) {
    output.writeFieldBegin('ticket', Thrift.Type.STRING, 2);
    output.writeString(this.ticket);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppStoreQueryParam = module.exports.AppStoreQueryParam = function(args) {
  this.appName = null;
  this.userId = null;
  this.appClassifyId = null;
  this.pageSize = null;
  this.pageNum = null;
  if (args) {
    if (args.appName !== undefined && args.appName !== null) {
      this.appName = args.appName;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.appClassifyId !== undefined && args.appClassifyId !== null) {
      this.appClassifyId = args.appClassifyId;
    }
    if (args.pageSize !== undefined && args.pageSize !== null) {
      this.pageSize = args.pageSize;
    }
    if (args.pageNum !== undefined && args.pageNum !== null) {
      this.pageNum = args.pageNum;
    }
  }
};
AppStoreQueryParam.prototype = {};
AppStoreQueryParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.appName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.appClassifyId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.pageSize = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.pageNum = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppStoreQueryParam.prototype.write = function(output) {
  output.writeStructBegin('AppStoreQueryParam');
  if (this.appName !== null && this.appName !== undefined) {
    output.writeFieldBegin('appName', Thrift.Type.STRING, 1);
    output.writeString(this.appName);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 2);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.appClassifyId !== null && this.appClassifyId !== undefined) {
    output.writeFieldBegin('appClassifyId', Thrift.Type.I64, 3);
    output.writeI64(this.appClassifyId);
    output.writeFieldEnd();
  }
  if (this.pageSize !== null && this.pageSize !== undefined) {
    output.writeFieldBegin('pageSize', Thrift.Type.I64, 4);
    output.writeI64(this.pageSize);
    output.writeFieldEnd();
  }
  if (this.pageNum !== null && this.pageNum !== undefined) {
    output.writeFieldBegin('pageNum', Thrift.Type.I64, 5);
    output.writeI64(this.pageNum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppRelationBean = module.exports.AppRelationBean = function(args) {
  this.id = null;
  this.userID = null;
  this.appID = null;
  this.classifyID = null;
  this.relationStatus = null;
  this.createTime = null;
  this.updateTime = null;
  this.sort = null;
  this.relationColumn1 = null;
  this.relationColumn2 = null;
  this.relationColumn3 = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.userID !== undefined && args.userID !== null) {
      this.userID = args.userID;
    }
    if (args.appID !== undefined && args.appID !== null) {
      this.appID = args.appID;
    }
    if (args.classifyID !== undefined && args.classifyID !== null) {
      this.classifyID = args.classifyID;
    }
    if (args.relationStatus !== undefined && args.relationStatus !== null) {
      this.relationStatus = args.relationStatus;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.updateTime !== undefined && args.updateTime !== null) {
      this.updateTime = args.updateTime;
    }
    if (args.sort !== undefined && args.sort !== null) {
      this.sort = args.sort;
    }
    if (args.relationColumn1 !== undefined && args.relationColumn1 !== null) {
      this.relationColumn1 = args.relationColumn1;
    }
    if (args.relationColumn2 !== undefined && args.relationColumn2 !== null) {
      this.relationColumn2 = args.relationColumn2;
    }
    if (args.relationColumn3 !== undefined && args.relationColumn3 !== null) {
      this.relationColumn3 = args.relationColumn3;
    }
  }
};
AppRelationBean.prototype = {};
AppRelationBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.appID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.classifyID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.relationStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.updateTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.sort = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.relationColumn1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.relationColumn2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.relationColumn3 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppRelationBean.prototype.write = function(output) {
  output.writeStructBegin('AppRelationBean');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.userID !== null && this.userID !== undefined) {
    output.writeFieldBegin('userID', Thrift.Type.I64, 2);
    output.writeI64(this.userID);
    output.writeFieldEnd();
  }
  if (this.appID !== null && this.appID !== undefined) {
    output.writeFieldBegin('appID', Thrift.Type.I64, 3);
    output.writeI64(this.appID);
    output.writeFieldEnd();
  }
  if (this.classifyID !== null && this.classifyID !== undefined) {
    output.writeFieldBegin('classifyID', Thrift.Type.I32, 4);
    output.writeI32(this.classifyID);
    output.writeFieldEnd();
  }
  if (this.relationStatus !== null && this.relationStatus !== undefined) {
    output.writeFieldBegin('relationStatus', Thrift.Type.I32, 5);
    output.writeI32(this.relationStatus);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 6);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.updateTime !== null && this.updateTime !== undefined) {
    output.writeFieldBegin('updateTime', Thrift.Type.STRING, 7);
    output.writeString(this.updateTime);
    output.writeFieldEnd();
  }
  if (this.sort !== null && this.sort !== undefined) {
    output.writeFieldBegin('sort', Thrift.Type.I32, 8);
    output.writeI32(this.sort);
    output.writeFieldEnd();
  }
  if (this.relationColumn1 !== null && this.relationColumn1 !== undefined) {
    output.writeFieldBegin('relationColumn1', Thrift.Type.STRING, 9);
    output.writeString(this.relationColumn1);
    output.writeFieldEnd();
  }
  if (this.relationColumn2 !== null && this.relationColumn2 !== undefined) {
    output.writeFieldBegin('relationColumn2', Thrift.Type.STRING, 10);
    output.writeString(this.relationColumn2);
    output.writeFieldEnd();
  }
  if (this.relationColumn3 !== null && this.relationColumn3 !== undefined) {
    output.writeFieldBegin('relationColumn3', Thrift.Type.STRING, 11);
    output.writeString(this.relationColumn3);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppStoreParam = module.exports.AppStoreParam = function(args) {
  this.type = null;
  this.appStoreQueryParam = null;
  this.appRelation = null;
  this.appID = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.appStoreQueryParam !== undefined && args.appStoreQueryParam !== null) {
      this.appStoreQueryParam = new ttypes.AppStoreQueryParam(args.appStoreQueryParam);
    }
    if (args.appRelation !== undefined && args.appRelation !== null) {
      this.appRelation = new ttypes.AppRelationBean(args.appRelation);
    }
    if (args.appID !== undefined && args.appID !== null) {
      this.appID = args.appID;
    }
  }
};
AppStoreParam.prototype = {};
AppStoreParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.type = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.appStoreQueryParam = new ttypes.AppStoreQueryParam();
        this.appStoreQueryParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.appRelation = new ttypes.AppRelationBean();
        this.appRelation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.appID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppStoreParam.prototype.write = function(output) {
  output.writeStructBegin('AppStoreParam');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.BYTE, 1);
    output.writeByte(this.type);
    output.writeFieldEnd();
  }
  if (this.appStoreQueryParam !== null && this.appStoreQueryParam !== undefined) {
    output.writeFieldBegin('appStoreQueryParam', Thrift.Type.STRUCT, 2);
    this.appStoreQueryParam.write(output);
    output.writeFieldEnd();
  }
  if (this.appRelation !== null && this.appRelation !== undefined) {
    output.writeFieldBegin('appRelation', Thrift.Type.STRUCT, 3);
    this.appRelation.write(output);
    output.writeFieldEnd();
  }
  if (this.appID !== null && this.appID !== undefined) {
    output.writeFieldBegin('appID', Thrift.Type.I64, 4);
    output.writeI64(this.appID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

